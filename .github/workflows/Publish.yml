name: Github Actions Publish

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: ${{ matrix.os }} ${{ matrix.compiler }}
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: True
      max-parallel: 1
      matrix:
        os: [Ubuntu, Windows]
        include:
          - os: Windows
            compiler: MSVC
            c_compiler: cl
            cxx_compiler: cl
            generator: Visual Studio 17 2022
            build_type_variable: CMAKE_CONFIGURATION_TYPES
            runs_on: windows-2022
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-windows_amd64.zip
          # - os: MacOS (ARM64)
          #   compiler: AppleClang
          #   c_compiler: cc
          #   cxx_compiler: c++
          #   generator: Xcode
          #   build_type_variable: CMAKE_CONFIGURATION_TYPES
          #   runs_on: macos-14
          #   asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-macos_arm64.zip
          # - os: MacOS (AMD64)
          #   compiler: AppleClang
          #   c_compiler: cc
          #   cxx_compiler: c++
          #   generator: Xcode
          #   build_type_variable: CMAKE_CONFIGURATION_TYPES
          #   runs_on: macos-13
          #   asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-macos_amd64.zip
          - os: Ubuntu
            compiler: Clang
            c_compiler: clang
            cxx_compiler: clang++
            generator: Ninja
            build_type_variable: CMAKE_BUILD_TYPE
            runs_on: ubuntu-24.04
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-ubuntu_amd64.zip

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: True

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - uses: lukka/get-cmake@latest

      - name: Xcode Select Version
        if: ${{ startsWith(matrix.os, 'MacOS') }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0.1'

      - name: Install Extra Packages
        if: ${{ matrix.os == 'Ubuntu' }}
        run: |
          sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev uuid-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev

      - name: Install Conan
        run: |
            python -m pip install --upgrade pip
            pip install conan
            conan --version
            conan profile detect --force

      - name: Cache Conan
        uses: actions/cache@v4.2.0
        with:
          path: |
            ./.conan_home
          key: ${{ matrix.os }}-Release-conan-cpp23-${{ hashFiles('conanfile.py') }}

      - name: Configure
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_FORMAT_TARGETS=OFF -G"${{matrix.generator}}" -D${{matrix.build_type_variable}}=Release -DCMAKE_C_COMPILER=${{matrix.c_compiler}} -DCMAKE_CXX_COMPILER=${{matrix.cxx_compiler}}

      - name: Build
        run: |
            cd build
            cmake --build . --config Release

      - name: Install
        run: |
          cd build
          cmake --install . --config Release

      - name: Get Release Notes
        id: extract_release_notes
        uses: ffurrer2/extract-release-notes@v2.2.0

      - name: Zip Release
        run: |
          cd publish
          tar -a -c -f ../${{ matrix.asset_name }} *

      - name: Upload Binaries
        uses: svenstaro/upload-release-action@2.9.0
        with:
          release_name: Release ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
          body: ${{ steps.extract_release_notes.outputs.release_notes }}
          draft: false
