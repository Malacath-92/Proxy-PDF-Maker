name: Github Actions CI

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      compiler:
        required: true
        type: string
      runs_on:
        required: true
        type: string
      build_type:
        required: true
        type: string

jobs:
  build:
    name: ${{ inputs.os }} ${{ inputs.compiler }} ${{ inputs.build_type }}
    runs-on: ${{ inputs.runs_on }}

    steps:
      - name: Free Disk Space (Ubuntu)
        if: ${{ inputs.os == 'Ubuntu' }}
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false

      - uses: actions/checkout@v4
        with:
          submodules: True

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - uses: lukka/get-cmake@v3.31.6

      - name: Xcode Select Version (MacOS)
        if: ${{ startsWith(inputs.os, 'MacOS') }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Install Extra Packages (Ubuntu)
        if: ${{ inputs.os == 'Ubuntu' }}
        run: |
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev uuid-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev libxcb-util-dev libxcb-util0-dev
          sudo apt-get install gcc-14 g++-14

      - name: Restore Conan Cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          path: |
            ./.conan_home
          key: ${{ inputs.os }}-${{ inputs.build_type }}-conan-cpp23-${{ hashFiles('conanfile.py') }}

      - name: Install Conan
        run: |
            python -m pip install --upgrade pip
            pip install conan
            conan --version
            conan profile detect --force

      - name: Conan set Ninja Generator (MacOS)
        if: ${{ startsWith(inputs.os, 'MacOS') }}
        run: |
          cd .conan_home/profiles
          echo "[conf]" >> default
          echo "tools.cmake.cmaketoolchain:generator=Ninja" >> default
          echo "" >> default
          
      - name: Configure (MacOS-ARM64)
        id: configure-macos-arm
        if: ${{ inputs.os == 'MacOS-ARM64' }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=ON -DPPP_FORMAT_TARGETS=OFF -GXcode -DCMAKE_CONFIGURATION_TYPES=${{inputs.build_type}} -DCMAKE_C_COMPILER=cc -DCMAKE_CXX_COMPILER=c++ -DCMAKE_OSX_ARCHITECTURES="arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"

      - name: Configure (MacOS-x86)
        id: configure-macos-x86
        if: ${{ inputs.os == 'MacOS-x86' }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=ON -DPPP_FORMAT_TARGETS=OFF -GXcode -DCMAKE_CONFIGURATION_TYPES=${{inputs.build_type}} -DCMAKE_C_COMPILER=cc -DCMAKE_CXX_COMPILER=c++ -DCMAKE_OSX_ARCHITECTURES="x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"

      - name: Configure (Ubuntu)
        id: configure-ubu
        if: ${{ inputs.os == 'Ubuntu' }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=ON -DPPP_FORMAT_TARGETS=OFF -GNinja -DCMAKE_BUILD_TYPE=${{inputs.build_type}} -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14

      - name: Configure (Windows)
        id: configure-win
        if: ${{ inputs.os == 'Windows' }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=ON -DPPP_FORMAT_TARGETS=OFF -G"Visual Studio 17 2022" -DCMAKE_CONFIGURATION_TYPES=${{inputs.build_type}} -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl

      - name: Clean up Conan
        run: |
          conan cache clean "*"

      - name: Always save Conan Cache
        if: always() && (steps.configure-macos-arm.conclusion == 'success' || steps.configure-macos-x86.conclusion == 'success' || steps.configure-ubu.conclusion == 'success' || steps.configure-win.conclusion == 'success') && steps.cache-conan.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ./.conan_home
          key: ${{ steps.cache-conan.outputs.cache-primary-key }}

      - name: Build
        run: |
            cd build
            cmake --build . --config ${{inputs.build_type}}

      - name: Test
        run: |
            cd build
            ctest . -C ${{inputs.build_type}} --output-on-failure
