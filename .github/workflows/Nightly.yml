name: Github Actions Nightly

on:
    schedule:
      - cron: "0 15 * * *" # run at 3 PM UTC every day
    push:
      paths:
        - "**/Nightly.yml"
    workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }} ${{ matrix.compiler }}
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        os: [Windows, Ubuntu-ARM64, Ubuntu-x86, MacOS-ARM64, MacOS-x86]
        include:
          - os: Windows
            compiler: MSVC
            runs_on: windows-2022
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-windows_amd64.zip
          - os: Ubuntu-ARM64
            compiler: Gcc
            runs_on: ubuntu-24.04-arm
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-ubuntu_arm64.zip
          - os: Ubuntu-x86
            compiler: Gcc
            runs_on: ubuntu-24.04
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-ubuntu_amd64.zip
          - os: MacOS-ARM64
            compiler: AppleClang
            runs_on: macos-14
            arch: arm64
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-osx_arm64.zip
          - os: MacOS-x86
            compiler: AppleClang
            runs_on: macos-14
            arch: x86_64
            asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}-osx_x86_64.zip

    steps:
      - name: Free Disk Space (Ubuntu)
        if: ${{ startsWith(matrix.os, 'Ubuntu') }}
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false

      - uses: actions/checkout@v4
        with:
          submodules: True

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - uses: lukka/get-cmake@v3.31.6

      - name: Xcode Select Version (MacOS)
        if: ${{ startsWith(matrix.os, 'MacOS') }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Install Extra Packages (Ubuntu)
        if: ${{ startsWith(matrix.os, 'Ubuntu') }}
        run: |
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev uuid-dev libxcb-cursor-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev libxcb-util-dev libxcb-util0-dev
          sudo apt-get install gcc-14 g++-14

      - name: Create .conanrc
        run: |
          echo "conan_home=./.conan_home" >> .conanrc
          echo "" >> default
          mkdir .conan_home
          cd .conan_home
          mkdir profiles

      - name: Restore Conan Cache
        id: cache-conan
        uses: actions/cache/restore@v4
        with:
          path: |
            ./.conan_home
          key: ${{ matrix.os }}-Release-conan-cpp23-${{ hashFiles('conanfile.py') }}

      - name: Install Conan
        run: |
            python -m pip install --upgrade pip
            pip install conan
            conan --version
            conan profile detect --force

      - name: Conan set Ninja Generator (MacOS)
        if: ${{ startsWith(matrix.os, 'MacOS') }}
        run: |
          cd .conan_home/profiles
          echo "[conf]" >> default
          echo "tools.cmake.cmaketoolchain:generator=Ninja" >> default
          echo "" >> default

      - name: Configure (MacOS)
        if: ${{ startsWith(matrix.os, 'MacOS') }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=ON -DPPP_FORMAT_TARGETS=OFF -GXcode -DCMAKE_CONFIGURATION_TYPES=Release -DCMAKE_C_COMPILER=cc -DCMAKE_CXX_COMPILER=c++ -DCMAKE_OSX_ARCHITECTURES=${{matrix.arch}} -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"

      - name: Configure (Ubuntu)
        if: ${{ startsWith(matrix.os, 'Ubuntu') }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=OFF -DPPP_FORMAT_TARGETS=OFF -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14

      - name: Configure (Windows)
        if: ${{ matrix.os == 'Windows' }}
        run: |
          mkdir build
          cd build
          cmake .. -Wno-dev -DPPP_BUILD_TESTS=OFF -DPPP_FORMAT_TARGETS=OFF -G"Visual Studio 17 2022" -DCMAKE_CONFIGURATION_TYPES=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl

      - name: Build
        run: |
            cd build
            cmake --build . --config Release

      - name: Install
        run: |
          cd build
          cmake --install . --config Release

      - name: Strip Binaries (Ubuntu)
        if: ${{ startsWith(matrix.os, 'Ubuntu') }}
        run: |
          cd publish
          strip --strip-debug proxy_pdf

      - name: Zip Release
        run: |
          cd publish
          tar -a -c -f ../${{ matrix.asset_name }} *

      - name: Upload Binaries
        uses: svenstaro/upload-release-action@2.9.0
        with:
          release_name: Nightly
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          overwrite: True
          tag: "nightly"
          body: "Unstable nightly release, use at your own risk"
          draft: False
          prerelease: True
